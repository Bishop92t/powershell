# created by Alan Bishop
# last modified 5/14/2021
#
# simple script to show a groups parsed in various ways


# display info on this script
if ($args.count -eq 0)
{
	Write-Output "`n `n usage: `n"
	Write-Output ".\List-Groups.ps1 active	list all group names minus some excluded service account groups"
 	Write-Output ".\List-Groups.ps1 details 	list all groups with 1+ users (can show service account groups)"
 	Write-Output ".\List-Groups.ps1 all		list all groups "
 	Write-Output ".\List-Groups.ps1 user $name 	list all groups $name is in ($name is the SAMname e.g. John Doe would be jdoe)"
 	Write-Output ".\List-Groups.ps1 rdp 		list all RDP computers as well as any current connections"
}
# else setup some common variables
else
{
	# set the group exclusion text file
	$excludedGroups = Get-Content '.\debloat files\excludedgroups.txt'

	# get all AD group names and categories (sorted alphabetically on name)
	$groups = (get-adgroup -Filter * | select SAMAccountName, GroupCategory | Sort-Object -Property SAMAccountName )
}


# list all groups not in the group exclusion text file
if ($args[0] -eq "active")
{
	ForEach ($group in $groups)
	{
		# exclude any groups that are listed in the group exclusion text file above
		if (-not ($excludedGroups -contains $group.SAMAccountName))
		{
			Write-Host $group.SAMAccountName
		}
	}
}

# list all groups with 1 or more members
elseif ($args[0] -eq "details")
{
	# create a new object so this gets formatted correctly when it's done pulling out empty groups
	[System.Collections.ArrayList]$printableGroups = $groups

	Write-Host " "
	Write-Host "this can take a minute, please be patient"
	Write-Host " "

	ForEach ($group in $groups)
	{
		# create a 'count' property for the $group object
		$group | Add-Member -MemberType NoteProperty -Name Count -Value (Get-ADGroup -Identity $group.SAMAccountName -Properties Members).Members.Count

		# if the number of members is >0, add the group object to the $printableGroup array of objects
		if ($group.count -lt 1)
		{
			$printableGroups.Remove($group)
		}
	}
	Write-Output $printableGroups
}

# list all groups
elseif ($args[0] -eq "all")
{
	$printableGroups = New-Object -TypeName "System.Collections.ArrayList"

	Write-Host " "
	Write-Host "this can take a minute, please be patient"
	Write-Host " "

	ForEach ($group in $groups)
	{
		$group | Add-Member -MemberType NoteProperty -Name Count -Value ((Get-ADGroup -Identity $group.SAMAccountName -Properties Members).Members.Count)
		$printableGroups.Add($group) | out-null
	}
	Write-Output $printableGroups
}

elseif ($args[0] -eq "user")
{
	Get-ADPrincipalGroupMembership $args[1] | select Name
}

elseif ($args[0] -eq "rdp")
{
	$computers = (Get-ADComputer -Filter * -Properties * | Where-Object {$_.MemberOf -like "*RDP enabled computers*"} | Select-Object Name).name
	foreach ($computer in $computers)
	{
		if ($computer -ne "hrcoordinator2")
		{
			Write-Output "`n $($computer)"
			query user /server:$computer
		}
	}
}
